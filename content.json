{"meta":{"title":"BIGKEL BLOB","subtitle":"","description":"","author":"jiakuan.chen","url":"https://github.com/kw520/kw520.github.io","root":"/"},"pages":[{"title":"Categories","date":"2023-09-09T10:09:56.476Z","updated":"2023-09-09T10:09:56.476Z","comments":true,"path":"categories/index.html","permalink":"https://github.com/kw520/kw520.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-09-09T10:09:56.502Z","updated":"2023-09-09T10:09:56.502Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/kw520/kw520.github.io/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2023-09-09T10:09:56.459Z","updated":"2023-09-09T10:09:56.459Z","comments":true,"path":"about/index.html","permalink":"https://github.com/kw520/kw520.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"leetcode做题笔记","date":"2023-09-05T10:56:11.783Z","updated":"2023-10-03T12:38:30.105Z","comments":true,"path":"2023/09/05/leetcode做题笔记/","link":"","permalink":"https://github.com/kw520/kw520.github.io/2023/09/05/leetcode%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/","excerpt":"","text":"一、合并两个有序数组 思路：从原始nums1和nums2的末尾开始比较，不比nums2小的数往nums1的后面放，若一方遍历完，则另一方继续遍历直到结束。 三个指针，分别为 int one &#x3D; m - 1; ​ int two &#x3D; n - 1; ​ int tail &#x3D; m + n - 1; 若one &#x3D;&#x3D; -1，则nums1[tail] &#x3D; nums2[two]，且two–，tail–； 反之若two &#x3D;&#x3D; -1，则nums1[tail] &#x3D; nums1[one]，且one–，tail–； 反之若nums1[one] &gt;&#x3D; nums2[two]，则nums1[tail] &#x3D; nums1[one]，且one–，tail–； 反之，则nums1[tail] &#x3D; nums2[two]，且two–，tail–； 1234567891011121314151617181920212223public void merge(int[] nums1, int m, int[] nums2, int n) &#123; int one = m - 1; int two = n - 1; int tail = m + n - 1; while(one &gt; -1 || two &gt; -1) &#123; int cur = 0; if(one == -1) &#123; cur = nums2[two]; two --; &#125; else if(two == -1) &#123; cur = nums1[one]; one --; &#125; else if(nums1[one] &gt;= nums2[two]) &#123; cur = nums1[one]; one --; &#125; else &#123; cur = nums2[two]; two --; &#125; nums1[tail] = cur; tail --; &#125;&#125; 二、移除元素 思路： ​ 方法一、双指针，都从头开始，R指针若不等于val，则赋值给L后，L和R同时右移，若等于，则L不动，R右移寻找不等于val的值赋值给L ​ **方法二、双指针，L指向头，R指向尾，L &lt; R，若L指针不等于val，则右移，若等于val，则R指针值赋值给L指针，R指针左移，一直循环。** 12345678910111213public int removeElement(int[] nums, int val) &#123; int left = 0; int right = nums.length -1; while (left &lt;= right) &#123; if (nums[left] == val) &#123; nums[left] = nums[right]; right--; &#125; else &#123; left++; &#125; &#125; return left;&#125; 三、删除有序数组中的重复项 思路：指针p指向第一个数，指针q指向第二个数，如果两个值相等，则q++。如果不相等，当q - p &gt; 1时（避免0，1，2，3，4这种极端情况，表示当p和q不相邻时，才用调换值，避免自己和自己调换），调换q和p+1的值，且p++， q++。 1234567891011121314public int removeDuplicates(int[] nums) &#123; int p = 0; int q = 1; while(q &lt; nums.length) &#123; if(nums[q] != nums[p]) &#123; if(q - p &gt; 1) &#123; nums[p + 1] = nums[q]; &#125; p ++; &#125; q ++; &#125; return p + 1;&#125; *四、有序数组中只能重复两次 思路：指针slow、fast都指向下标为2的位置 ​ 若fast &#x3D;&#x3D; slow[n-2]，由于slow[n]之前已经是整理好后的，并且数组有序，那么slow[n-1]不可能比slow[n-2]小，也不可能比fast大，所以此时必然有fast &#x3D;&#x3D; slow[n-2] &#x3D;&#x3D; slow[n-1]，则需要fast右移找到不等于slow[n-2]的值赋值给slow[n]（若fast找到的值和slow当前值相等，则可以不用赋值），然后slow和fast同时右移。 ​ **若fast !&#x3D; slow[n-2]，则说明slow[n]之前排好序的slow[n-2] &lt; slow[n-1]，那么此时fast的值可以给slow[n]** 123456789101112131415161718public int removeDuplicates(int[] nums) &#123; int n = nums.length; if(n &lt; 3) &#123; return n; &#125; int slow = 2; int fast = 2; while(fast &lt; n) &#123; if(nums[fast] != nums[slow -2]) &#123; if(nums[fast] != nums[slow]) &#123; nums[slow] = nums[fast]; &#125; slow ++; &#125; fast ++; &#125; return slow;&#125; 五、多数元素 思路： ​ 方法一、排序，多数元素一定占据n&#x2F;2的位置。 ​ 方法二、排序，p、q指针从0开始，若q &#x3D;&#x3D; p，则q向右遍历，若q !&#x3D; p，则q-1-p+1为当前数的个数，若此个数大于n&#x2F;2，则返回nums[p]，反之则p &#x3D; q，继续向后遍历，直到q &gt;&#x3D; n为止 1234567891011121314151617public int majorityElement(int[] nums) &#123; Arrays.sort(nums); int n = nums.length; int more = n / 2; int p = 0; int q = 0; while(q &lt; n) &#123; if(nums[p] == nums[q]) &#123; q ++; &#125; else if(q - p &gt; more)&#123; break; &#125; else &#123; p = q; &#125; &#125; return nums[p];&#125; *六、轮转数组 思路：实际轮转次数 k &#x3D; k – 整数*n，比如n &#x3D; 5，轮转6次，那么实际次数为1，n &#x3D; 5，轮转2次，实际次数为2。将nums全部反转，然后根据实际轮转次数分割，[0, k - 1] 和 [k, n - 1]再各自反转。 12345678910111213141516public void rotate(int[] nums, int k) &#123; k = k % nums.length; swap(nums, 0, nums.length - 1); swap(nums, 0, k - 1); swap(nums, k, nums.length - 1);&#125;public void swap(int[] nums, int start, int end) &#123; while(start &lt; end) &#123; nums[start] = nums[start] ^ nums[end]; nums[end] = nums[start] ^ nums[end]; nums[start] = nums[start] ^ nums[end]; start ++; end --; &#125;&#125; 七、买卖股票最佳时机 思路：指针p和q分别指向0和1，记录最大利润max &#x3D; 0，q向后移动，若 q - p &lt; 0，则后面的数字在和q求差时一定比和p求差时大，说明 q 点买进的利润一定大于当前 p 点买进的利润，所以 p 点重新定位，p &#x3D; q。若 q - p &gt; 0，则判断利润是否比之前的利润 max 大，大则覆盖。 123456789101112131415public int maxProfit(int[] prices) &#123; int max = 0; int p = 0; int q = 1; while(q &lt; prices.length) &#123; int money = prices[q] - prices[p]; if(money &gt; 0) &#123; max = money &gt; max ? money : max; &#125; else &#123; p = q; &#125; q ++; &#125; return max;&#125; *八、买卖股票最佳时机2 思路： 方法一：动态规划 时间复杂度O(n)，空间复杂度O(n) ​ 每天手里股票的状态有两种，dp[i,0]表示第 i 天未持有股票，dp[i,1]表示第 i 天持有股票。 ​ dp[i,0]的时候，可以看作是 i-1 天已经卖出了股票，i 天还没有买进，即dp[i-1,0]。或者是 i-1 天买进了股票，i 天卖出，即dp[i-1,1] + price[i]。所以 i 天最大的利润可以可以列出如下转换方程： dp[i,0] &#x3D; max{dp[i-1,0], dp[i-1,1]+price[i]} ​ dp[i,1]的时候，可以看作是 i-1 天买入了股票，i 天还没有卖出，即dp[i-1,1]。或者是 i-1 天卖出了股票，i 天买入，即dp[i-1,0] - price[i]。所以 i 天最大的利润可以列出如下转换方程： dp[i,1] &#x3D; max{dp[i-1,1], dp[i-1,0]-price[i]} ​ 到最后一天的时候，卖出股票肯定要比买入股票利润高，所以只用返回dp[n,0]即可。(空间优化) 由于当天的最大利润只与前一天有关，并且每天只有0、1两种状态，那么可以只用dp0表示当天未持有股票状态，dp1表示当天持有股票状态，每过一天用最新值覆盖dp0、dp1即可。那么到了最后一天的最大利润可以用dp0表示即可。 12345678910public int maxProfit(int[] prices) &#123; int n = prices.length; int dp0 = 0; int dp1 = -prices[0]; for(int i = 1; i &lt; n; i++) &#123; dp0 = Math.max(dp0, dp1+prices[i]); dp1 = Math.max(dp1, dp0-prices[i]); &#125; return dp0;&#125; ​ 方法二：贪心算法 时间复杂度O(n)，空间复杂度O(1) ​ 买入股票的最大利润，其实就是每相邻两天利润差大于0的和。比如1，4，3，12这一组数，我们只要避开两个产生负数的数，即可保证利润最大。 12345678public int maxProfit(int[] prices) &#123; int n = prices.length; int max = 0; for(int i = 1; i &lt; n; i++) &#123; max += Math.max(0, prices[i] - prices[i - 1]); &#125; return max;&#125; *九、跳跃游戏 思路：贪心算法 时间复杂度O(n)，空间复杂度O(1)。 ​ 存在可到达的最大的位置maxend，判断当前位置是否小于maxend。 ​ 若小于，则说明存在步数可以到达此位置 ​ 判断此位置可跳跃到的位置是否大于maxend。 ​ 若大于，则更新maxend，反之继续遍历。 ​ 若大于，则说明当前位置不存在步数可以到达，直接返回false。 12345678910public boolean canJump(int[] nums) &#123; int maxend = 0; for(int i = 0; i &lt; nums.length; i++) &#123; if(i &gt; maxend) &#123; return false; &#125; maxend = Math.max(maxend, nums[i] + i); &#125; return true;&#125; *十、跳跃游戏2 思路：贪心算法 时间复杂度O(n)，空间复杂度O(1)。 ​ 从下标0开始遍历，其能够走到的最远的距离是走到下标2，此时记录max = 2，end = 2，step = 1。遍历到下标1的时候，发现下标1最大能走到下标4，此时更新max = 4，但是不能更新end，因为上一步的end还没走完，需要走完上一步的end之后，才能确定下一步需要走到哪里。遍历到下标2的时候，发现下标2最大只能走到下标3，小于max，此时end已经走完，确定了max = 4，重新设置end = 4，step ++。此处就可以确定是使用下标1的时候，这步能够走到最远为下标4。依次遍历，由于我们当前代码设定step的自增是在起点时自增，而不是走完后自增，所以为了避免最后一步刚好是在数组的最后一个数时，导致程序又把最后一个数当成是起点，所以这里让数组的界限设置为nums.length - 1。 12345678910111213public int jump(int[] nums) &#123; int max = 0; int end = 0; int step = 0; for(int i = 0; i &lt; nums.length - 1; i++) &#123; max = Math.max(nums[i] + i, max); // 持续更新跳跃的最大点，结算时确定下次要跳的位置 if(i == end) &#123; // 已经遍历到了上一次起跳的最大位置的终点（结算） end = max; // 设置下次需要跳到的位置的终点 step ++; // 跳动 &#125; &#125; return step;&#125; *十一、O(1)插入、删除、随机获取 思路：变长数组无法解决插入和删除时间复杂度为O(1)，哈希表无法解决获取随机数时间复杂度为O(1)。所以使用变长数组 + 哈希表 操作插入时，首先判断val是否存在哈希表中，如果存在，则返回false，如果不存在，则插入val。操作如下： ​ 1、在变长数组末尾加入val ​ 2、将加入后的(val, index)放入哈希表，返回true 12345678public boolean insert(int val) &#123; if(map.containsKey(val)) &#123; return false; &#125; nums.add(val); map.put(val, nums.size() - 1); return true;&#125; 操作删除时，首先判断val是否存在哈希表中，如果不存在，则返回false，如果存在，则操作如下： ​ 1、在哈希表中，获取要删除的值val的下标index。 ​ 2、将变长数组中的最后一个数end，放入下标为index中，并将这个数的(end, index)在哈希表中更新。 ​ 2、删除变长数组中的最后一个数end，删除哈希表中key为val的键值对。 123456789101112public boolean remove(int val) &#123; if(!map.containsKey(val)) &#123; return false; &#125; int end = nums.get(nums.size() - 1); int index = map.get(val); nums.set(index, end); map.put(end, index); nums.remove(nums.size() - 1); map.remove(val); return true;&#125; *十二、除自身以外数组的乘积 思路：将当前数组每个节点的左侧乘积和右侧乘积单独算出来，然后一一对应相乘。下标0的左侧乘积为 1，下标n的右侧乘积为 1 1234567891011121314public int[] productExceptSelf(int[] nums) &#123; int length = nums.length; int[] answer = new int[length]; answer[0] = 1; for(int i = 1; i &lt; length; i++) &#123; answer[i] = answer[i - 1] * nums[i - 1]; // 首先存放每个节点的左侧乘积 &#125; int R = 1; for(int j = length - 1; j &gt;= 0; j--) &#123; answer[j] = answer[j] * R; R = R * nums[j]; // 下一个节点的右侧乘积 = 当前节点 * 当前节点右侧乘积 &#125; return answer;&#125; *十三、加油站 思路： 无论从哪个点开始，只要总油量大于总耗油量（即剩余油量大于 0），就肯定可以跑完一圈，所以使用sum记录剩余油量，如果从当前点出发的总剩余油量（sum）小于上一步到达当前点的总剩余油量（sum），则从当前点出发无法到达下一步，则存储下一步的坐标表示当前点无法作为起点，下一步作为起点。依次循环，直到遍历结束 sum记录着每一步的剩余油量的总和，即使走到下标4，需要去判断其是否能走一圈，也需要用到前面三个点的剩余油量，sum又有记录，所以可以直接将下标4的剩余油量和sum相加。 例如：若下标3能够到达下标4，那么for中的if不会进入，idx还是保留着（从下标2开始走时，无法走到下标3，idx始终保留无法到达下一步坐标的当前点的下一步的坐标，这样才能确定是从哪一步开始可以到达下一步从而绕一圈的）下标3。如果当前剩余油量+之前剩余总油量（sum）小于0，则说明，无法绕一圈。反之，则可以绕一圈，且起点为idx（即使下标1无法到达下标2，下标2无法到达下标3，但是下标3可以到达下标4，且到达之后的剩余油量可以弥补之前的空缺，那么就可绕一圈，且起点为下标3）。 1234567891011121314151617public int canCompleteCircuit(int[] gas, int[] cost) &#123; if(gas == null || cost == null || gas.length == 0 || cost.length == 0) &#123; return 0; &#125; int n = gas.length; int sum = 0; int min = 0; int idx = 0; for (int i = 0;i &lt; n; i++) &#123; sum += gas[i] - cost[i]; // 总的剩余油量 if(sum &lt; min) &#123; // 判断当前总剩余油量和上一次总剩余油量的大小，若小于，则说明当前点不能到达下一点 min = sum; // 更新总的剩余油量 idx = i + 1; // 保存当前点的下一点为idx，若循环不再进来，则说明可以从idx出发到达下一步 &#125; // 当前循环进if，说明无法到达下一步，又能够到达下一步的不会进来，所以idx使用i+1 &#125; return sum &lt; 0 ? -1 : idx;&#125; **十四、分发糖果 思路： 情况1：先升序，后降序。此时第一个人肯定会有一颗糖，记录pre &#x3D; 1，在升序部分，后面每一步都作pre +&#x3D; 1，记录升序的数量inc（到达最高点时，也会将最高点算到inc中，但是降序时，最高点也要算到降序部分，但是降序部分没法从最高点开始算起，只能遍历到最高点的后一个点时，才会知晓数组开始降序，所以降序会有特殊处理，后面会用降序的数量和其比较）。开始降序时，使用dec表示降序的数量（如果前一个值是最高点，后一个值开始降序，那么dec只是从后一个值开始算起降序的数量，其实最高点也要算是降序的一部分，当dec和inc相等时，说明降序部分肯定超过升序部分了，所以dec要加上1才能当作总的降序部分，如 1 2 3 4 3 2 1 0。升序部分是 1 2 3 4 inc &#x3D; 4，降序部分是 4 3 2 1 0，但是只有遍历到3时才知道降序开始，dec是从3开始算起 dec &#x3D; 4，但是实际是5，所以当dec &#x3D;&#x3D; inc时，dec需要累加），也可以看作是降序部分，总的应发的糖果数（因为降序是从高点往下，但是dec是从0开始的，所以无法满足dec的每一次累加的值，是降序每个小孩的应发的糖果，只能算是应发的总糖果）。如果dec &#x3D;&#x3D; inc时，降序部分超过了升序部分，dec应当累加。 情况2：先降序，后升序。开始降序时，无法知晓后一步是否变成升序操作，所以降序的每一步都需要将pre重新置为1，若后一步变成升序，那么后一步的pre就是2，升序部分便可以看作是从这一步开始的。 情况3：先升序，平序，后降序。由于平序部分没有大小关系，所以从第二个平序数开始，pre可以用最小的数1即可，并且升序数量inc也可以看作是1，然后再按照降序部分的操作计算dec的值即可，如 5 5 3，此时inc为1，dec最开始为1，刚好和inc相等，那么dec需要累加1，因为实际dec是2。 情况4：先降序，平序，后升序。由于开始降序时，是从1开始计算的，所以降序的最低点就可以看作是1（只不过倒序了而已），平序部分只用给最小数1即可，即pre &#x3D; 1，然后再按照升序的逻辑计算，最后一个平序数当然就可以看作是升序数的起点。 汇总：整合这4种情况，若数组只有一个数，则只需要返回1，若有两个数，则可以看作是以上四种情况的任何一种情况。使用ret &#x3D; 1作为结果的初始值，从数组的第二个开始遍历，升序、平序时，ret &#x3D; ret + pre，降序时，ret &#x3D; ret + dec，最后返回ret即可。 123456789101112131415161718192021public int candy(int[] ratings) &#123; int n = ratings.length; int ret = 1; int inc = 1, dec = 0, pre = 1; for (int i = 1; i &lt; n; i++) &#123; if (ratings[i] &gt;= ratings[i - 1]) &#123; dec = 0; pre = ratings[i] == ratings[i - 1] ? 1 : pre + 1; ret += pre; inc = pre; &#125; else &#123; dec++; if (dec == inc) &#123; dec++; &#125; ret += dec; pre = 1; &#125; &#125; return ret;&#125; **十五、接雨水 思路： 方法一：动态规划 时间复杂度O(n) 空间复杂度O(n) 对于下标 i，下雨后水能到达的最大高度等于下标 i 两边的最大高度的最小值，下标 i 处能接的雨水量等于下标 i 处的水能到达的最大高度减去 height[i]。 开始遍历，每到一步都可以得到当前点和最大值的数值差，此时可以看作该点能够接雨水的量。但是当达到最高点后，后面的点肯定相对于最高点来说是降序，因此这些点和最高点之间的差不能当成该点能够接雨水的量。所以我们既要从左往右遍历，也要从右往左遍历，这样，我们就可以得到最高点左侧的准确的接雨水量和最高点右侧的准确的接雨水量。 此时我们既可以根据最高点区分左右侧，然后相加可得到总的能够接雨水量，也可以根据左右分别遍历得到的接雨水量的交集来确定总的接雨水量。 12345678910111213141516171819202122public int trap(int[] height) &#123; int n = height.length; if(n == 0) &#123; return n; &#125; int[] leftMax = new int[n]; leftMax[0] = height[0]; for(int left = 1; left &lt; n; left ++) &#123; leftMax[left] = Math.max(leftMax[left - 1], height[left]); &#125; int[] rightMax = new int[n]; rightMax[n - 1] = height[n - 1]; for(int right = n - 2; right &gt;= 0; right --) &#123; rightMax[right] = Math.max(rightMax[right + 1], height[right]); &#125; int res = 0; for(int i = 0; i &lt; n; i ++) &#123; res += Math.min(leftMax[i], rightMax[i]) - height[i]; &#125; return res;&#125; 方法二：双指针 时间复杂度O(n) 空间复杂度O(1) 对于方法一中的左右两边分别遍历，得到总的接雨水量，这样会出现达到最高点之后，后面的操作都是浪费资源的，根本就不用去计算。此时可以优化成双指针，左右两个指针移动时，也记录移动过程中，分别得到的最大值（因为左边指针移动时，只能去根据右边的最大值去比对当前点能否接雨水，比如leftMax &#x3D; 2，rightMax &#x3D; 3，cur &#x3D; 1，此时就可以看作是cur可以接雨水。若rightMax &#x3D; 1，那么cur无法接雨水）左右两个指针总有一个会先走到最高点，走到最高点的指针停止不动，另外一个指针按照当前指针算出来的最大值减去当前点，得到当前点能够接的雨水量。直到两个指针会和。 123456789101112131415161718public int trap(int[] height) &#123; int n = height.length; int res = 0; int leftMax = 0, left = 0; int rightMax = 0, right = n - 1; while(left &lt; right) &#123; leftMax = Math.max(leftMax, height[left]); rightMax = Math.max(rightMax, height[right]); if(height[left] &lt; rightMax) &#123; // 此时左边的指针将rightMax当成最高点 res += leftMax - height[left]; left ++; &#125; else &#123; // 此时右边的指针将leftMax当成最高点 res += rightMax - height[right]; right --; &#125; &#125; return res;&#125; 方法三：单调栈 时间复杂度O(n) 空间复杂度O(n) 维护一个单调递减栈，里面存储的是下标，满足从栈底到栈顶下标所对应的值单调递减。 栈顶元素为top，第二个元素为left。当height[i] &gt; height[top]，就说明top可以接雨水，该区域的宽度为 i - left - 1，高度为top下一个栈left的值和当前点 i 的值之间的最小值与top点值的差，即min(height[left], height[i]) − height[top]。 为了得到left，top需要出栈，top计算完所接雨水后，left变成新的top，然后 i 继续和此top比较，重复上一步操作。直到栈空或者 i 对应的值小于等于top的值。（为什么是小于等于呢，因为栈是单调递减的，小于等于就可以直接入栈，只有大于才用和栈中数据去比对） 12345678910111213141516171819public int trap(int[] height) &#123; int n = height.length; int res = 0; Deque&lt;Integer&gt; stack = new LinkedList&lt;Integer&gt;(); for(int i = 0; i &lt; n; i ++) &#123; while(!stack.isEmpty() &amp;&amp; height[i] &gt; height[stack.peek()]) &#123; int top = stack.pop(); if(stack.isEmpty()) &#123; break; &#125; int left = stack.peek(); int width = i - left - 1; int high = Math.min(height[i], height[left]) - height[top]; res += width * high; &#125; stack.push(i); &#125; return res;&#125; 十六、罗马数字转整数 思路：XIV &#x3D; X - I + V &#x3D; 10 - 1 + 5 &#x3D; 14 将罗马字符和数字用map映射起来，如果当前的罗马字符对应的数字比下一个罗马字符对应的数字小，则说明要做减法，反之做加法。 12345678910111213141516171819202122public int romanToInt(String s) &#123; Map&lt;Character, Integer&gt; map = new HashMap(); map.put(&#x27;I&#x27;, 1); map.put(&#x27;V&#x27;, 5); map.put(&#x27;X&#x27;, 10); map.put(&#x27;L&#x27;, 50); map.put(&#x27;C&#x27;, 100); map.put(&#x27;D&#x27;, 500); map.put(&#x27;M&#x27;, 1000); int n = s.length(); int res = 0; for(int i = 0; i &lt; n; i++) &#123; Integer value = map.get(s.charAt(i)); if(i &lt; n - 1 &amp;&amp; value &lt; map.get(s.charAt(i + 1))) &#123; res -= value; &#125; else &#123; res += value; &#125; &#125; return res;&#125; *十七、整数转罗马数字 思路：计算出每个数字在每个位上的表示形式，整理成一张硬编码表 123456789101112131415class Solution &#123; String[] thousands = &#123;&quot;&quot;, &quot;M&quot;, &quot;MM&quot;, &quot;MMM&quot;&#125;; String[] hundreds = &#123;&quot;&quot;, &quot;C&quot;, &quot;CC&quot;, &quot;CCC&quot;, &quot;CD&quot;, &quot;D&quot;, &quot;DC&quot;, &quot;DCC&quot;, &quot;DCCC&quot;, &quot;CM&quot;&#125;; String[] tens = &#123;&quot;&quot;, &quot;X&quot;, &quot;XX&quot;, &quot;XXX&quot;, &quot;XL&quot;, &quot;L&quot;, &quot;LX&quot;, &quot;LXX&quot;, &quot;LXXX&quot;, &quot;XC&quot;&#125;; String[] ones = &#123;&quot;&quot;, &quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;, &quot;V&quot;, &quot;VI&quot;, &quot;VII&quot;, &quot;VIII&quot;, &quot;IX&quot;&#125;; public String intToRoman(int num) &#123; StringBuffer roman = new StringBuffer(); roman.append(thousands[num / 1000]); roman.append(hundreds[num % 1000 / 100]); roman.append(tens[num % 100 / 10]); roman.append(ones[num % 10]); return roman.toString(); &#125;&#125; 十八、最长公共前缀 思路：数组中的每个字符依次比较，每得到一个公共前缀，直接拿当前公共前缀和后一个字符比较即可，然后再更新公共前缀，比较途中公共前缀为空，则直接返回空字符。 1234567891011121314151617181920212223public String longestCommonPrefix(String[] strs) &#123; if (strs == null || strs.length == 0) &#123; return &quot;&quot;; &#125; String prefix = strs[0]; int count = strs.length; for (int i = 1; i &lt; count; i++) &#123; prefix = longestCommonPrefix(prefix, strs[i]); if (prefix.length() == 0) &#123; break; &#125; &#125; return prefix;&#125;public String longestCommonPrefix(String str1, String str2) &#123; int length = Math.min(str1.length(), str2.length()); int index = 0; while (index &lt; length &amp;&amp; str1.charAt(index) == str2.charAt(index)) &#123; index++; &#125; return str1.substring(0, index);&#125; *十九、反转字符串中的单词 思路：首先去除字符串头尾空格，后去除单词间多余空格，为了降低空间复杂度，那么直接对字符串进行更改，首先将字符串颠倒，然后再颠倒每个单词即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061class Solution &#123; public String reverseWords(String s) &#123; StringBuilder sb = trimSpaces(s); reverse(sb, 0, sb.length() - 1); // 翻转字符串 reverseEachWord(sb); // 翻转每个单词 return sb.toString(); &#125; public StringBuilder trimSpaces(String s) &#123; int left = 0, right = s.length() - 1; // 去掉字符串开头的空白字符 while (left &lt;= right &amp;&amp; s.charAt(left) == &#x27; &#x27;) &#123; ++left; &#125; // 去掉字符串末尾的空白字符 while (left &lt;= right &amp;&amp; s.charAt(right) == &#x27; &#x27;) &#123; --right; &#125; // 将字符串间多余的空白字符去除 StringBuilder sb = new StringBuilder(); while (left &lt;= right) &#123; char c = s.charAt(left); if (c != &#x27; &#x27;) &#123; sb.append(c); &#125; else if (sb.charAt(sb.length() - 1) != &#x27; &#x27;) &#123; // 若sb中已经加入了空格，则多余的空格不用加入 sb.append(c); &#125; ++left; &#125; return sb; &#125; public void reverse(StringBuilder sb, int left, int right) &#123; while (left &lt; right) &#123; char tmp = sb.charAt(left); sb.setCharAt(left++, sb.charAt(right)); sb.setCharAt(right--, tmp); &#125; &#125; public void reverseEachWord(StringBuilder sb) &#123; int n = sb.length(); int start = 0, end = 0; while (start &lt; n) &#123; // 循环至单词的末尾 while (end &lt; n &amp;&amp; sb.charAt(end) != &#x27; &#x27;) &#123; ++end; &#125; // 翻转单词 此时end指向空格或超过字符串长度 reverse(sb, start, end - 1); // 更新start，去找下一个单词 start = end + 1; ++end; &#125; &#125;&#125; *二十、N字形变换 思路：遍历字符串，当从N字形头开始的时候，字符放置的位置是从第一行递增，到尾之后，开始递减 1234567891011121314151617181920212223public String convert(String s, int numRows) &#123; if(numRows &lt; 2) &#123; return s; &#125; List&lt;StringBuilder&gt; rows = new ArrayList&lt;StringBuilder&gt;(); for(int i = 0; i &lt; numRows; i++) &#123; rows.add(new StringBuilder()); &#125; int i = 0; int flag = -1; // 初始化是反向，s遍历开始时，会变为正向递增。列结尾后会递减 for(char c : s.toCharArray()) &#123; rows.get(i).append(c); if(i == 0 || i == numRows - 1) &#123; flag = -flag; &#125; i += flag; &#125; StringBuilder res = new StringBuilder(); for(StringBuilder row : rows) &#123; res.append(row); &#125; return res.toString();&#125; 二一、String中第一个匹配项下标 思路： 若从0开始，到n - m为止的时候，还没有遍历到长字符串中有字符和短字符串中的头字符相等，那么就不用遍历了。 12345678910111213141516public int strStr(String haystack, String needle) &#123; int n = haystack.length(); int m = needle.length(); for(int i = 0; i &lt;= n - m; i++) &#123; // 此处需要使用&lt;=，比如5-3，遍历前两个后，还需要遍历第三个才行 int a = i, b = 0; // 此处使用a从i开始继续递增，如果递增到后面不想等了，a还是会等于后一步的i while(b &lt; m &amp;&amp; haystack.charAt(a) == needle.charAt(b)) &#123; a ++; b ++; &#125; if(b == m) &#123; // 说明b遍历完了，已经相等了，那么返回起始点i即可 return i; &#125; &#125; return -1;&#125; ** 二二、文本对齐 思路：首先确定每一行可以放置的单词的个数，这样可以得到这行的空格的个数，从而计算出每个单词之间的空格数 空格要如何填充，可以分为一下三种情况： 情形一：当前行是最后一行。则每个单词间空格个数为1个，行尾使用空格填充。 情形二：当前行非最后一行，且只有一个单词。则单词左对齐，行尾使用空格填充。 情形三：当前行非最后一行，且有多个单词。设当前行单词个数为nums，空格数为spaces，则每个单词之间的空格数应该为 avg = nums / (spaces - 1)。其余数extra应该填充在当前行第一个单词后面。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Solution &#123; public List&lt;String&gt; fullJustify(String[] words, int maxWidth) &#123; List&lt;String&gt; ans = new ArrayList&lt;String&gt;(); int right = 0, n = words.length; while (true) &#123; int left = right; // 当前行的第一个单词在 words 的位置 int sumLen = 0; // 统计这一行单词长度之和 // 循环确定当前行可以放多少单词，注意单词之间应至少有一个空格。 // (right-left)可以看作是如果将right位的单词放置进来，需要的空格数，也可以看作是当前行的单词数 while (right &lt; n &amp;&amp; sumLen + words[right].length() + right - left &lt;= maxWidth) &#123; sumLen += words[right++].length(); &#125; // 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格 if (right == n) &#123; StringBuffer sb = join(words, left, n, &quot; &quot;); sb.append(blank(maxWidth - sb.length())); ans.add(sb.toString()); return ans; &#125; int numWords = right - left; // 当前行的单词数 int numSpaces = maxWidth - sumLen; // 当前行只有一个单词：该单词左对齐，在行末填充剩余空格 if (numWords == 1) &#123; StringBuffer sb = new StringBuffer(words[left]); sb.append(blank(numSpaces)); ans.add(sb.toString()); continue; &#125; // 当前行不只一个单词 int avgSpaces = numSpaces / (numWords - 1); int extraSpaces = numSpaces % (numWords - 1); StringBuffer sb = new StringBuffer(); // 拼接额外加一个空格的单词 sb.append(join(words, left, left + extraSpaces + 1, blank(avgSpaces + 1))); sb.append(blank(avgSpaces)); sb.append(join(words, left + extraSpaces + 1, right, blank(avgSpaces))); // 拼接其余单词 ans.add(sb.toString()); &#125; &#125; // blank 返回长度为 n 的由空格组成的字符串 public String blank(int n) &#123; StringBuffer sb = new StringBuffer(); for (int i = 0; i &lt; n; ++i) &#123; sb.append(&#x27; &#x27;); &#125; return sb.toString(); &#125; // join 返回用 sep 拼接 [left, right) 范围内的 words 组成的字符串 public StringBuffer join(String[] words, int left, int right, String sep) &#123; StringBuffer sb = new StringBuffer(words[left]); for (int i = left + 1; i &lt; right; ++i) &#123; sb.append(sep); sb.append(words[i]); &#125; return sb; &#125;&#125; 二三、验证回文字符串 思路：若是标点符号、空格等特殊字符串，直接跳过即可 12345678910111213141516171819public boolean isPalindrome(String s) &#123; int left = 0, right = s.length() - 1; while(left &lt; right) &#123; while(left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(left))) &#123; left ++; &#125; while(left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(right))) &#123; right --; &#125; if(left &lt; right) &#123; if(Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) &#123; return false; &#125; left ++; right --; &#125; &#125; return true;&#125; 二四、判断子序列 思路：s和t匹配上了，则同时右移，匹配不上，则t右移即可，以一方结束而终止循环，最后判断s的指针是否和s的长度相等 12345678910111213public boolean isSubsequence(String s, String t) &#123; int sl = s.length(); int tl = t.length(); int tp = 0; int sp = 0; while(tp &lt; tl &amp;&amp; sp &lt; sl) &#123; if(t.charAt(tp) == s.charAt(sp)) &#123; sp ++; &#125; tp ++; &#125; return sp == sl;&#125; *二五、两数之和2 思路：二分法、双指针 方法一：二分法 时间复杂度O(nlogn) 空间复杂度O(1) 首先循环数组，确定一个数 i，从 i + 1到 n - 1的范围中，使用二分法循环判断 mid，是否满足 nums[mid] &#x3D;&#x3D; target - nums[i]。相等则返回，小于则说明 mid 的值小于差值，差值出现在 mid 之后，所以更新 low 值位mid + 1，大于则更新 high 值为 mid - 1。 123456789101112131415161718public int[] twoSum(int[] numbers, int target) &#123; int n = numbers.length; for(int i = 0; i &lt; n; i ++) &#123; int low = i + 1; int high = n - 1; while(low &lt;= high) &#123; // numbers只有两个数时，只用&lt;，无法进入while循环 int mid = (high - low) / 2 + low; if(numbers[mid] == target - numbers[i]) &#123; return new int[]&#123;i + 1, mid + 1&#125;; &#125; else if(numbers[mid] &gt; target - numbers[i]) &#123; high = mid - 1; &#125; else &#123; low = mid + 1; &#125; &#125; &#125; return new int[]&#123;-1, -1&#125;;&#125; 方法二：双指针 时间复杂度O(n) 空间复杂度O(1) first指针指向数组首，last指针指向数组尾，判断first + last 和 target 的大小。相等则返回，小于则first ++，大于则last –。 12345678910111213141516public int[] twoSum(int[] numbers, int target) &#123; int n = numbers.length; int first = 0, last = n - 1; while(first &lt; last) &#123; int subv = target - numbers[last]; int fv = numbers[first]; if(subv == fv) &#123; return new int[]&#123;first + 1, last + 1&#125;; &#125; else if(subv &gt; fv) &#123; first ++; &#125; else &#123; last --; &#125; &#125; return new int[]&#123;-1, -1&#125;;&#125; *二六、盛最多水的容器 思路：使用双指针，left指向头，right指向尾。left和right之间的距离总是在变小的，这时left和right的移动就要保证哪边小移动那边。 盛水的长度 X &#x3D; right - left 盛水的高度 Y &#x3D; min(height[left], height[right]) 盛水的容积 V &#x3D; X * Y，在 X 总是变小的情况下，我们就得保证Y要变大，这样 V 才有可能变大，所以left、right指向的值，那边小，移动哪边指针。 1234567891011121314151617public int maxArea(int[] height) &#123; int left = 0; int right = height.length - 1; int max = 0; while(left &lt; right) &#123; int x = right - left; int y = height[right] - height[left]; if(y &lt; 0) &#123; max = Math.max(max, height[right] * x); right --; &#125; else &#123; max = Math.max(max, height[left] * x); left ++; &#125; &#125; return max;&#125; *二七、三数之和 思路：将数组排序，确定第一个数后，剩下的两个数便可以根据它们的和去判断哪个指针要右移，哪个指针要左移。 1234567891011121314151617181920212223242526272829303132333435public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) &#123; int n = nums.length; Arrays.sort(nums); List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;List&lt;Integer&gt;&gt;(); for(int first = 0; first &lt; n; first ++) &#123; // 若后一个数与前一个数相同，则直接跳过当前循环 if(first &gt; 0 &amp;&amp; nums[first] == nums[first-1]) &#123; continue; &#125; int third = n - 1; int target = -nums[first]; for(int second = first + 1; second &lt; n; second ++) &#123; if(second &gt; first + 1 &amp;&amp; nums[second] == nums[second-1]) &#123; continue; &#125; // 此时说明third指向的值过大，third需要左移 while(second &lt; third &amp;&amp; nums[third] + nums[second] &gt; target) &#123; third --; &#125; // 说明second的当前循环没有值满足条件，直接break，让first进行下一次遍历 if(second == third) &#123; break; &#125; if(nums[second] + nums[third] == target) &#123; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(nums[first]); list.add(nums[second]); list.add(nums[third]); ans.add(list); &#125; // 如果是nums[third] + nums[second] &lt; target的情况，说明second指向的值较小，则需要second右移 &#125; &#125; return ans;&#125; *二八、长度最小子数组 思路：当left和right指针指向的位置之间的值大于等于给定值之后，right继续向右的话，值肯定是大于的，这个时候就要left右移，去尽可能缩小这个子数组。如果缩小到小于给定值之后，right便可以向右。循环如此。 12345678910111213141516public int minSubArrayLen(int target, int[] nums) &#123; int n = nums.length; int left = 0, right = 0; int res = Integer.MAX_VALUE; int sum = 0; while(right &lt; n) &#123; sum += nums[right]; while(sum &gt;= target) &#123; res = Math.min(res, right-left+1); sum -= nums[left]; left ++; &#125; right ++; &#125; return res == Integer.MAX_VALUE ? 0 : res;&#125; *二九、无重复字串的最长子串 思路：若没碰到重复字符，则right可以右移，若碰到了，则left右移，并且删掉left之前指向的值，直到删除了set中存在的让right重复的值。然后right继续右移，循环如此。 123456789101112131415public int lengthOfLongestSubstring(String s) &#123; int n = s.length(); int left = 0, right = 0, res = 0; Set&lt;Character&gt; set = new HashSet&lt;Character&gt;(); while(left &lt; n) &#123; while(right &lt; n &amp;&amp; !set.contains(s.charAt(right))) &#123; set.add(s.charAt(right)); right ++; &#125; res = Math.max(res, right - left); left ++; set.remove(s.charAt(left-1)); &#125; return res;&#125; **三十、最小覆盖子串 思路：指针 l 和 r 都从 s 字符的下标0开始遍历，r 初步遍历到包含 t 中所有字符位置为止，然后 l 右移，逐步缩小滑动窗口中的字符数量，若右移之后又不包含 t 中的所有字符了，那就 r 继续右移。循环如此，找出最小覆盖子串。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Solution &#123; Map&lt;Character, Integer&gt; tmap = new HashMap&lt;Character, Integer&gt;(); Map&lt;Character, Integer&gt; smap = new HashMap&lt;Character, Integer&gt;(); public String minWindow(String s, String t) &#123; int tLen = t.length(); int sLen = s.length(); if(sLen &lt; tLen) &#123; return &quot;&quot;; &#125; for(int i = 0; i &lt; tLen; i++) &#123; char tc = t.charAt(i); tmap.put(tc, tmap.getOrDefault(tc, 0) + 1); // 首先将t中的所有字符的数量放到tmap中 &#125; int l = 0, r = 0, resL = 0, resR = 0; int len = Integer.MAX_VALUE; while(r &lt; sLen) &#123; char sc = s.charAt(r); if(tmap.containsKey(sc)) &#123; // 判断当前r指向的字符是否在t中 smap.put(sc, smap.getOrDefault(sc, 0) + 1); // 若在，将当前字符存放在smap中 &#125; while(check() &amp;&amp; l &lt;= r) &#123; // 检查通过说明l -&gt; r之间已经包含了t，smap和tmap中的内容完全相同 char c = s.charAt(l); if(r - l + 1 &lt; len) &#123; len = r - l + 1; resL = l; resR = l + len; &#125; if(tmap.containsKey(c)) &#123; // 此时缩小窗口 smap.put(c, smap.get(c) - 1); &#125; l ++; // 窗口缩小 &#125; r ++; // 窗口中字符不包含t，或窗口无法继续缩小 &#125; return s.substring(resL, resR); &#125; // 检查当前l -&gt; r之间的字符是否包含了t public Boolean check() &#123; Iterator iter = tmap.entrySet().iterator(); while(iter.hasNext()) &#123; Map.Entry entry = (Map.Entry) iter.next(); Character key = (Character) entry.getKey(); Integer value = (Integer) entry.getValue(); if(smap.getOrDefault(key, 0) &lt; value) &#123; return false; &#125; &#125; return true; &#125;&#125; *三一、有效的数独 思路：使用三个数组分别来记录每一行，每一列，每个九宫格中的数的出现次数 对于每一行中的值，使用一个数组rows[9][9]来表示，当前数放在这个数组的哪里，出现了几次。 对于每一列中的值，使用一个数组columns[9][9]来表示，当前数放在这个数组的哪里，出现了几次。 对于每一个九宫格的值，使用一个数组subboxes[3][3][9]来表示，当前数放在这个数组的哪里，出现了几次。 比如borad[5][6] = 9，那么这个数 5 ，放在rows中的第 5 行，第 9 - 1 列，出现了 1 次。放在columns中的第 6 行，第 9 - 1 列，出现了一次。如果borad[5][n] = 9，那么这个数继续放在第 5 行，第 9 - 1 列，出现了2次。同理board[n][6] = 9也是如此。如果有位置出现了超过 1 次，那么就直接返回false。 1234567891011121314151617181920public boolean isValidSudoku(char[][] board) &#123; int[][] rows = new int[9][9]; int[][] columns = new int[9][9]; int[][][] subboxes = new int[3][3][9]; for(int i = 0; i &lt; 9; i ++) &#123; for(int j = 0; j &lt; 9; j++) &#123; char c = board[i][j]; if(c != &#x27;.&#x27;) &#123; int index = c - &#x27;0&#x27; - 1; rows[i][index] ++; // 定住行，判断这一行中有没有数字重复 columns[j][index] ++; // 定住列，判断这一列中有没有数字重复 subboxes[i/3][j/3][index] ++; if(rows[i][index] &gt; 1 || columns[j][index] &gt; 1 || subboxes[i/3][j/3][index] &gt; 1) &#123; return false; &#125; &#125; &#125; &#125; return true;&#125; *三二、螺旋矩阵 思路：将矩阵看作有若干层，一层一层输出 假设左上角位于(top, left)，右下角位于(bottom, right)，按照如下顺序遍历当前层元素： 1、从左往右遍历，由(top, left) 到 (top, right)。 2、从上往下遍历，由(top + 1, right) 到 (bottom, right)。 3、如果left &lt; right，top &lt; bottom。 ​ 从右往左遍历，由(bottom, right - 1) 到 (bottom, left)。 ​ 从下往上遍历，由(bottom - 1, left) 到 (top + 1, left)。 **当只剩下最后一列遍历时，需要判断此时的left &lt; right，否则会多输出。当剩下最后一行遍历时，需要判断此时的top &lt; bottom， 否则也会多输出。因为行和列都会在前两个循环输出，若后两个循环不判断，则会造成数据重复输出。** 1234567891011121314151617181920212223242526272829public List&lt;Integer&gt; spiralOrder(int[][] matrix) &#123; List&lt;Integer&gt; order = new ArrayList&lt;&gt;(); if(matrix == null || matrix.length == 0 || matrix[0].length == 0) &#123; return order; &#125; int rows = matrix.length, columns = matrix[0].length; int left = 0, right = columns - 1, top = 0, bottom = rows - 1; while(left &lt;= right &amp;&amp; top &lt;= bottom) &#123; for(int colomn = left; colomn &lt;= right; colomn ++) &#123; order.add(matrix[top][colomn]); &#125; for(int row = top + 1; row &lt;= bottom; row ++) &#123; order.add(matrix[row][right]); &#125; if(left &lt; right &amp;&amp; top &lt; bottom) &#123; for(int colomn = right - 1; colomn &gt;= left; colomn --) &#123; order.add(matrix[bottom][colomn]); &#125; for(int row = bottom - 1; row &gt; top; row --) &#123; order.add(matrix[row][left]); &#125; &#125; left ++; right --; top ++; bottom --; &#125; return order;&#125; *三三、旋转图像 思路：直接旋转。或者先水平轴对折，然后以左顶角和右底角连线为轴对折。 方法一：直接旋转 我们可以发现，对于矩阵中的第 i 行的第 j 个元素，在旋转后，它出现在倒数第 i 列的第 j 个位置。 因此，对于矩阵中的元素matrix[row][col]，在旋转后，它的新位置为matrix[col][n-row-1]。新的行等于原来的列，新的列等于n减去原来的行减去1。$$\\begin{cases} row &#x3D; col \\ col &#x3D; n - row - 1 \\end{cases}$$由此，我们可以得出矩形的四个方位的数据，旋转前后的位置关系如下： 1旋转到3，行列变化为：matrix[row][col] &#x3D;&#x3D;&#x3D;&gt; matrix[col][n-row-1] 3旋转到9，行列变化为：matrix[col][n-row-1] &#x3D;&#x3D;&#x3D;&gt; matrix[n-row-1][n-col-1] 9旋转到7，行列变化为： matrix[n-row-1][n-col-1] &#x3D;&#x3D;&#x3D;&gt; matrix[n-col-1][n-(n-row-1)-1] &#x3D;&#x3D;&#x3D;&gt; matrix[n-col-1][row] 7旋转到1，行列变化为： matrix[n-col-1][row] &#x3D;&#x3D;&#x3D;&gt; matrix[row][n-(n-col-1)-1] &#x3D;&#x3D;&#x3D;&gt; matrix[row][col] 对于我们实际需要遍历的行数和列数，我们可以推理出，若 n 是偶数矩阵，则行和列遍历到 n&#x2F;2 即可。若 n 是奇数矩阵，则行遍历到n&#x2F;2，列遍历到(n+1)&#x2F;2。如下图： 123456789101112public void rotate(int[][] matrix) &#123; int n = matrix.length; for(int i = 0; i &lt; n / 2; i ++) &#123; for(int j = 0; j &lt; (n + 1) / 2; j ++) &#123; int temp = matrix[i][j]; matrix[i][j] = matrix[n - j - 1][i]; matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]; matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]; matrix[j][n - i - 1] = temp; &#125; &#125;&#125; 方法二：先水平轴对折，然后以左顶角和右底角连线为轴对折 水平轴对折，行列变化为：matrix[row][col] &#x3D;&#x3D;&#x3D;&gt; matrix[n-row-1][col] 反斜轴对折，行列变化为：matrix[n-row-1][col] &#x3D;&#x3D;&#x3D;&gt; matrix[col][n-row-1] 12345678910111213141516171819public void rotate(int[][] matrix) &#123; int n = matrix.length; // 水平翻转 for (int i = 0; i &lt; n / 2; ++i) &#123; for (int j = 0; j &lt; n; ++j) &#123; int temp = matrix[i][j]; matrix[i][j] = matrix[n - i - 1][j]; matrix[n - i - 1][j] = temp; &#125; &#125; // 主对角线翻转 for (int i = 0; i &lt; n; ++i) &#123; for (int j = 0; j &lt; i; ++j) &#123; int temp = matrix[i][j]; matrix[i][j] = matrix[j][i]; matrix[j][i] = temp; &#125; &#125;&#125; *三四、矩阵置零 思路：首先记录第一行和第一列是否存在 0，对于非第一行和第一列为 0 的元素，可以将这个数所在的行和列的第一个数都置为 0，然后从第二行第二列开始遍历，判断遍历到的行和列的第一个数是否为 0，若为 0，则将当前行和列全部置为 0。最后再判断是否需要将第一行和第一列置为 0。 1、记录第一行和第一列是否本来就存在 0； 2、判断除第一行第一列外，是否存在 0，若存在，就将当前行和列的第一个数（在第一行或第一列上）置为 0； 3、根据第一行和第一列的 0（包括后期赋值的0）将非第一行和第一列的值全部变成 0； 4、最后根据第一步的记录，判断第一行和第一列是否需要置为0； 12345678910111213141516171819202122232425262728293031323334353637383940414243public void setZeroes(int[][] matrix) &#123; int m = matrix.length, n = matrix[0].length; boolean flagCol = false, flagRow = false; for(int i = 0; i &lt; m; i ++) &#123; if(matrix[i][0] == 0) &#123; flagCol = true; // 第一列存在0 &#125; &#125; for(int j = 0; j &lt; n; j ++) &#123; if(matrix[0][j] == 0) &#123; flagRow = true; // 第一行存在0 &#125; &#125; // 判断除第一行第一列外，是否存在0，若存在，就将当前行和列的第一个数置为0 for(int i = 1; i &lt; m; i ++) &#123; for(int j = 1; j &lt; n; j ++) &#123; if(matrix[i][j] == 0) &#123; matrix[i][0] = 0; matrix[0][j] = 0; &#125; &#125; &#125; // 根据第一行和第一列的0（包括后期赋值的0）将非第一行和第一列的值全部变成0 for(int i = 1; i &lt; m; i ++) &#123; for(int j = 1; j &lt; n; j ++) &#123; if(matrix[i][0] == 0 || matrix[0][j] == 0) &#123; matrix[i][j] = 0; &#125; &#125; &#125; // 最后判断是否需要将第一行和第一列置为0 if(flagRow) &#123; for(int j = 0; j &lt; n; j ++) &#123; matrix[0][j] = 0; &#125; &#125; if(flagCol) &#123; for(int i = 0; i &lt; m; i ++) &#123; matrix[i][0] = 0; &#125; &#125;&#125; *三五、生命游戏 思路：题目限定的条件都是根据相邻活细胞的数量来判断当前细胞是死是活。因此，对于活细胞变成死细胞后，我们可以使用额外的数据来表示当前细胞的状态，以便于后面可以准确的拿到细胞之前的状态。对于活细胞变成死细胞，可以将状态变成 -1，这样有相邻数据要去判断自己是否存活时，可以直接用 -1 的绝对值来查看它的相邻的细胞之前的状态。 1、两层嵌套遍历&#123;-1,0,1&#125;，可以快速得到某一点的周围 3 * 3 点的坐标，然后根据它们的值去判断它们之前的状态是否为活细胞。 2、根据活细胞的数量，将当前细胞的状态设置成容易识别的数字，比如 -1 就代表之前活细胞，现在死细胞；2 代表之前死细胞，现在活细胞。方便之后当前细胞作为别的细胞的相邻细胞的时候，能够准确的判断其之前的状态，从而去计算 liveNear 的值。 3、将细胞的状态设置完后，重新遍历，根据之前设置的值，重新将细胞的状态更新正常。 123456789101112131415161718192021222324252627282930313233343536373839public void gameOfLife(int[][] board) &#123; int[] near = new int[]&#123;-1,0,1&#125;; int rows = board.length; int cols = board[0].length; for(int row = 0; row &lt; rows; row ++) &#123; for(int col = 0; col &lt; cols; col ++) &#123; int liveNear = 0; for(int i = 0; i &lt; 3; i ++) &#123; for(int j = 0; j &lt; 3; j ++) &#123; if(!(near[i] == 0 &amp;&amp; near[j] == 0)) &#123; int r = row + near[i]; int c = col + near[j]; // Math.abs(board[r][c]) == 1 可以替换成 board[r][c] == 1 || board[r][c] == 3 if((r &gt;= 0 &amp;&amp; r &lt; rows) &amp;&amp; (c &gt;= 0 &amp;&amp; c &lt; cols) &amp;&amp; Math.abs(board[r][c]) == 1) &#123; liveNear ++; &#125; &#125; &#125; &#125; if(board[row][col] == 1 &amp;&amp; (liveNear &gt; 3 || liveNear &lt; 2)) &#123; board[row][col] = -1; // 这里也可以用别的值 如: board[row][col] = 3 &#125; if(board[row][col] == 0 &amp;&amp; (liveNear == 3)) &#123; board[row][col] = 2; &#125; &#125; &#125; for(int row = 0; row &lt; rows; row ++) &#123; for(int col = 0; col &lt; cols; col ++) &#123; if(board[row][col] == 2) &#123; board[row][col] = 1; &#125; if(board[row][col] == -1) &#123; board[row][col] = 0; &#125; &#125; &#125;&#125; 三六、赎金信 思路：magazine长度小于ransomNote，则直接返回false。判断ransomNote中使用到的字符的个数，在magazine中是否全部出现，个数是否能对上，不能对上，则返回false 12345678910111213141516public boolean canConstruct(String ransomNote, String magazine) &#123; if (ransomNote.length() &gt; magazine.length()) &#123; return false; &#125; int[] cnt = new int[26]; for (char c : magazine.toCharArray()) &#123; cnt[c - &#x27;a&#x27;]++; &#125; for (char c : ransomNote.toCharArray()) &#123; cnt[c - &#x27;a&#x27;]--; if(cnt[c - &#x27;a&#x27;] &lt; 0) &#123; return false; &#125; &#125; return true;&#125;","categories":[],"tags":[]}],"categories":[],"tags":[]}